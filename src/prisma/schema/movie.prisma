model Movie {
  id          Int       @id @default(autoincrement())
  movieData   MovieData @relation(fields: [movieDataId], references: [id])
  movieDataId Int       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addedToFavBy User[]
  ratings      Rating[]
  reviews      Review[]
  genres       Genre[]

  director   Celeb?  @relation("directors", fields: [directorId], references: [id])
  directorId Int?
  writers    Celeb[] @relation("writers")
  cast       Celeb[] @relation("cast")
}

model MovieData {
  id    Int    @id @default(autoincrement())
  Movie Movie?

  title             String
  storyline         String   @db.Text
  posterURL         String
  releaseDate       DateTime
  length            String
  countryOfOrigin   String
  productionCompany String
  language          String
}

model Rating {
  value   Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int

  @@id([movieId, userId])
}

model Review {
  id    Int    @id @default(autoincrement())
  title String
  text  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
  movieId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  Int
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String
  movies Movie[]
}
